package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/ramen-collective/go-cloudbuild-template/internal/dataloader"
	"github.com/ramen-collective/go-cloudbuild-template/internal/graph/generated"
	"github.com/ramen-collective/go-cloudbuild-template/internal/graph/model"
	"github.com/ramen-collective/go-cloudbuild-template/pkg/util/gqlutil"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.PrivateUser, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, uuids []gqlutil.UUID) ([]*model.User, error) {
	users, errs := dataloader.For(ctx).User.GetByUUID.LoadAll(ConvertArrayUUIDToString(uuids))
	if len(errs) > 0 {
		for _, err := range errs {
			if err != nil {
				graphql.AddError(ctx, err)
			}
		}
	}
	return users, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
